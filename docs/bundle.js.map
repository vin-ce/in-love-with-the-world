{
  "version": 3,
  "sources": ["../src/cellSettings.js", "../src/main.js"],
  "sourcesContent": ["\r\nconst defaultCell = {\r\n  awareness: 0, // 0.25, 0.5, 0.75, 1 \r\n\r\n  // 0 is not moving, 1 is N, 2 is NE etc. \r\n  curDirection: 0,\r\n  hasMoved: false, // prevents cell from moving again\r\n  movementType: 'default',\r\n\r\n  // keeps track of active modifiers\r\n  modifiers: {\r\n    breathers: false\r\n  },\r\n\r\n\r\n  // how many cycles alive in this current awareness\r\n  // different mindstates might have quicker timeAlive cycles for high awareness emotions but takes a long while for the low awareness ones to go away, or the opposite, or emotions overall just cycle out quickly\r\n  cyclesAlive: 0,\r\n\r\n  // the below values are set in particular settings themselves\r\n  // decay is what determines how much cyclesAlive should be\r\n  // at each awareness increment\r\n  // growth: {},\r\n  // decay: {},\r\n\r\n\r\n  // tracks if it has hit 1 awareness before\r\n  // setCyclesSettings function is where I set when this gets turned on and off\r\n  hadFullAwareness: false,\r\n\r\n  x: null,\r\n  y: null,\r\n}\r\n\r\n// this explains what all the cell settings are for\r\nconst cellSettingExplanations = {\r\n\r\n  // randomly adds an emotion every once in a while\r\n  newEmotionSettings: {\r\n    newEmotionChance: 0.5,\r\n    // right is chance, calculated by chance/total, e.g \r\n    // 0.25:7, 7/(7+1+1+1) = 0.7, or 70% chance \r\n    awarenessChance: {\r\n      0.25: 50,\r\n      0.5: 0,\r\n      0.75: 0,\r\n      1: 1,\r\n    }\r\n  },\r\n\r\n\r\n  defaultCell: {\r\n    ...defaultCell,\r\n\r\n    // setting the below to 'randomise' will determine \r\n    // movement settings through the chance property in movementSettings\r\n    // includes all of the movement types in movementSettings \r\n    // as well as 'randomise'\r\n    movementType: 'default',\r\n\r\n    // add active modifiers\r\n    modifiers: {\r\n      breathers: false\r\n    },\r\n\r\n    modulateSettingsChange: {\r\n      // possibility that below will change to this second form\r\n      chance: 0.1,\r\n\r\n      // the below keeps track of if using the modulated settings\r\n      // for this particular cell\r\n      isFormTwo: false,\r\n\r\n      decay: {\r\n        '0.25': 5,\r\n        '0.5': 5,\r\n        '0.75': 5,\r\n        '1': 5,\r\n        'recoverFromFull': 0,\r\n      },\r\n      // growth settings remain default for now\r\n    },\r\n\r\n    // each cell potentially has its own growth/ decay rate\r\n    // cycles alive for each awareness stage\r\n    decay: {\r\n      '0.25': 1000,\r\n      '0.5': 2,\r\n      '0.75': 2,\r\n      '1': 5,\r\n      // chance of being able to grow again after hadFullAwareness = true\r\n      'recoverFromFull': 0,\r\n    },\r\n\r\n    // cycles for each cycle upwards\r\n    // triggers when cyclesAlive = cycle (set below)\r\n    growth: {\r\n      '0.25': {\r\n        cycle: 3,\r\n        chance: 0.3\r\n      },\r\n      '0.5': {\r\n        cycle: 3,\r\n        chance: 0.5\r\n      },\r\n      '0.75': {\r\n        cycle: 3,\r\n        chance: 0.7\r\n      },\r\n    },\r\n\r\n  },\r\n\r\n\r\n  movementSettings: {\r\n    default: {\r\n      // chance of going these directions\r\n      forward: 0.7, // left & right will have `1 - forward` chance\r\n      left: 0.5, // right has `1 - left` chance\r\n\r\n      // chances of spawning any particular cell type. \r\n      // Works in the same way as newEmotion awareness chance\r\n      chance: 1,\r\n    },\r\n    left: {\r\n      forward: 0.3,\r\n      left: 0.9,\r\n      chance: 1,\r\n    },\r\n    right: {\r\n      forward: 0.3,\r\n      left: 0.3,\r\n      chance: 1,\r\n    },\r\n    beeline: {\r\n      forward: 0.95,\r\n      left: 0.5,\r\n      chance: 1,\r\n    },\r\n    // only needed if movementType = 'homing'\r\n    homing: {\r\n      left: 0.5,\r\n    }\r\n  },\r\n\r\n  movementModifiersSettings: {\r\n    breathers: {\r\n      // chance of having a breather modifier randomly added\r\n      chance: 0.5,\r\n      // chance movement stopped (e.g 50% time it stops moving)\r\n      stop: 0.5,\r\n\r\n    },\r\n\r\n    homing: {\r\n      enabled: true, // is homing active\r\n\r\n      // determines if homing cell decreases awareness upon meeting another cell\r\n      decrease: false,\r\n\r\n      // how wide does a homing cell search for a target\r\n      range: 5,\r\n    }\r\n  },\r\n}\r\n\r\n\r\nexport const MIND_STATE_SETTINGS = [\r\n  {\r\n    // --------------------\r\n    // GRID 1 (default)\r\n\r\n    newEmotionSettings: {\r\n      newEmotionChance: 0.1,\r\n      awarenessChance: {\r\n        0.25: 10,\r\n        0.5: 1,\r\n        0.75: 1,\r\n        1: 1,\r\n      }\r\n    },\r\n\r\n    defaultCell: {\r\n      ...defaultCell,\r\n      movementType: 'default',\r\n\r\n      modifiers: {\r\n        breathers: false\r\n      },\r\n\r\n      decay: {\r\n        '0.25': 20,\r\n        '0.5': 3,\r\n        '0.75': 3,\r\n        '1': 3,\r\n        'recoverFromFull': 0.7,\r\n      },\r\n\r\n      growth: {\r\n        '0.25': {\r\n          cycle: 3,\r\n          chance: 0.1\r\n        },\r\n        '0.5': {\r\n          cycle: 2,\r\n          chance: 0.1\r\n        },\r\n        '0.75': {\r\n          cycle: 2,\r\n          chance: 0.1\r\n        },\r\n      },\r\n    },\r\n\r\n    movementSettings: {\r\n      default: {\r\n        forward: 0.7,\r\n        left: 0.5,\r\n      },\r\n      left: {\r\n        forward: 0.3,\r\n        left: 0.9,\r\n      },\r\n      right: {\r\n        forward: 0.3,\r\n        left: 0.3,\r\n      },\r\n      beeline: {\r\n        forward: 0.95,\r\n        left: 0.5,\r\n      },\r\n    },\r\n\r\n    movementModifiersSettings: {\r\n      breathers: {\r\n        chance: 0,\r\n        stop: 0.5,\r\n      },\r\n\r\n      homing: {\r\n        enabled: true,\r\n        decrease: true,\r\n        range: 5,\r\n      }\r\n    },\r\n\r\n  },\r\n  {\r\n\r\n    // --------------------\r\n    // GRID 2 (overwhelm)\r\n\r\n    newEmotionSettings: {\r\n      newEmotionChance: 0.6,\r\n      awarenessChance: {\r\n        0.25: 4,\r\n        0.5: 2,\r\n        0.75: 1,\r\n        1: 1,\r\n      }\r\n    },\r\n\r\n    defaultCell: {\r\n      ...defaultCell,\r\n      movementType: 'randomise',\r\n\r\n      modifiers: {\r\n        breathers: false\r\n      },\r\n\r\n      decay: {\r\n        '0.25': 5,\r\n        '0.5': 3,\r\n        '0.75': 3,\r\n        '1': 3,\r\n        'recoverFromFull': 0.5,\r\n      },\r\n\r\n      growth: {\r\n        '0.25': {\r\n          cycle: 2,\r\n          chance: 0.8\r\n        },\r\n        '0.5': {\r\n          cycle: 2,\r\n          chance: 0.8\r\n        },\r\n        '0.75': {\r\n          cycle: 2,\r\n          chance: 0.7\r\n        },\r\n      },\r\n    },\r\n\r\n    movementSettings: {\r\n      default: {\r\n        forward: 0.7,\r\n        left: 0.5,\r\n        chance: 1,\r\n      },\r\n      left: {\r\n        forward: 0.3,\r\n        left: 0.9,\r\n        chance: 1,\r\n      },\r\n      right: {\r\n        forward: 0.3,\r\n        left: 0.3,\r\n        chance: 1,\r\n      },\r\n      beeline: {\r\n        forward: 0.95,\r\n        left: 0.5,\r\n        chance: 1,\r\n      },\r\n    },\r\n\r\n    movementModifiersSettings: {\r\n      breathers: {\r\n        chance: 0,\r\n        stop: 0.5,\r\n      },\r\n\r\n      homing: {\r\n        enabled: false,\r\n        decrease: true,\r\n        range: 5,\r\n      }\r\n    },\r\n\r\n  },\r\n  {\r\n\r\n\r\n    // --------------------\r\n    // GRID 3 (rumminating)\r\n\r\n    newEmotionSettings: {\r\n      newEmotionChance: 0.01,\r\n      awarenessChance: {\r\n        0.25: 10,\r\n        0.5: 1,\r\n        0.75: 1,\r\n        1: 1,\r\n      }\r\n    },\r\n\r\n    defaultCell: {\r\n      ...defaultCell,\r\n      movementType: 'randomise',\r\n\r\n      decay: {\r\n        '0.25': 50,\r\n        '0.5': 10,\r\n        '0.75': 10,\r\n        '1': 5,\r\n        'recoverFromFull': 0.5,\r\n      },\r\n\r\n      growth: {\r\n        '0.25': {\r\n          cycle: 1,\r\n          chance: 0.5\r\n        },\r\n        '0.5': {\r\n          cycle: 1,\r\n          chance: 0.4\r\n        },\r\n        '0.75': {\r\n          cycle: 1,\r\n          chance: 0.5\r\n        },\r\n      },\r\n    },\r\n\r\n    movementSettings: {\r\n      left: {\r\n        forward: 0.1,\r\n        left: 0.9,\r\n        chance: 1,\r\n      },\r\n      right: {\r\n        forward: 0.1,\r\n        left: 0.1,\r\n        chance: 1,\r\n      },\r\n    },\r\n\r\n    movementModifiersSettings: {\r\n      breathers: {\r\n        chance: 0,\r\n      },\r\n\r\n      homing: {\r\n        enabled: false,\r\n      }\r\n    },\r\n\r\n\r\n\r\n  },\r\n\r\n  {\r\n    // --------------------\r\n    // GRID 4 (clenched, suppressed, simmering (anger))\r\n\r\n    newEmotionSettings: {\r\n      newEmotionChance: 0.5,\r\n      awarenessChance: {\r\n        0.25: 1,\r\n        0.5: 1,\r\n        0.75: 1,\r\n        1: 1,\r\n      }\r\n    },\r\n\r\n    defaultCell: {\r\n      ...defaultCell,\r\n      movementType: 'default',\r\n\r\n      modifiers: {\r\n        breathers: true\r\n      },\r\n\r\n      decay: {\r\n        '0.25': 5,\r\n        '0.5': 5,\r\n        '0.75': 5,\r\n        '1': 7,\r\n        'recoverFromFull': 0.5,\r\n      },\r\n\r\n      growth: {\r\n        '0.25': {\r\n          cycle: 3,\r\n          chance: 0.5\r\n        },\r\n        '0.5': {\r\n          cycle: 2,\r\n          chance: 0.6\r\n        },\r\n        '0.75': {\r\n          cycle: 2,\r\n          chance: 0.7\r\n        },\r\n      },\r\n    },\r\n\r\n    movementSettings: {\r\n      default: {\r\n        forward: 0.7,\r\n        left: 0.5,\r\n      },\r\n      left: {\r\n        forward: 0.3,\r\n        left: 0.9,\r\n      },\r\n      right: {\r\n        forward: 0.3,\r\n        left: 0.3,\r\n      },\r\n      beeline: {\r\n        forward: 0.95,\r\n        left: 0.5,\r\n      },\r\n    },\r\n\r\n    movementModifiersSettings: {\r\n      breathers: {\r\n        chance: 0,\r\n        stop: 0.95,\r\n      },\r\n\r\n      homing: {\r\n        enabled: true,\r\n        decrease: false,\r\n        range: 5,\r\n      }\r\n    },\r\n\r\n  },\r\n  {\r\n    // --------------------\r\n    // GRID 5 (volatile)\r\n\r\n    newEmotionSettings: {\r\n      newEmotionChance: 0.5,\r\n      awarenessChance: {\r\n        0.25: 50,\r\n        0.5: 0,\r\n        0.75: 0,\r\n        1: 1,\r\n      }\r\n    },\r\n\r\n\r\n    defaultCell: {\r\n      ...defaultCell,\r\n\r\n      movementType: 'default',\r\n\r\n      modifiers: {\r\n        breathers: false\r\n      },\r\n\r\n      decay: {\r\n        '0.25': 1000,\r\n        '0.5': 2,\r\n        '0.75': 2,\r\n        '1': 5,\r\n        'recoverFromFull': 0,\r\n      },\r\n    },\r\n\r\n    movementSettings: {\r\n      default: {\r\n        forward: 0.7,\r\n        left: 0.5,\r\n      },\r\n      left: {\r\n        forward: 0.3,\r\n        left: 0.9,\r\n      },\r\n      right: {\r\n        forward: 0.3,\r\n        left: 0.3,\r\n      },\r\n      beeline: {\r\n        forward: 0.95,\r\n        left: 0.5,\r\n      },\r\n\r\n    },\r\n\r\n    movementModifiersSettings: {\r\n      breathers: {\r\n        chance: 0,\r\n        stop: 0.5,\r\n      },\r\n\r\n      homing: {\r\n        enabled: true,\r\n        decrease: false,\r\n        range: 5,\r\n      }\r\n    },\r\n\r\n\r\n\r\n  },\r\n  {\r\n    // --------------------\r\n    // GRID 6 (anxiety)\r\n\r\n    newEmotionSettings: {\r\n      newEmotionChance: 1,\r\n      awarenessChance: {\r\n        0.25: 1,\r\n        0.5: 1,\r\n        0.75: 1,\r\n        1: 1,\r\n      }\r\n    },\r\n\r\n    defaultCell: {\r\n      ...defaultCell,\r\n      movementType: 'homing',\r\n\r\n      modifiers: {\r\n        breathers: false\r\n      },\r\n\r\n      decay: {\r\n        '0.25': 5,\r\n        '0.5': 5,\r\n        '0.75': 5,\r\n        '1': 5,\r\n        'recoverFromFull': 0.25,\r\n      },\r\n    },\r\n\r\n    movementSettings: {\r\n      homing: {\r\n        left: 0.5,\r\n      }\r\n    },\r\n\r\n    movementModifiersSettings: {\r\n      breathers: {\r\n        chance: 0,\r\n        stop: 0.5,\r\n      },\r\n\r\n      homing: {\r\n        enabled: true,\r\n        decrease: false,\r\n        range: 5,\r\n      }\r\n    },\r\n\r\n  },\r\n  {\r\n    // --------------------\r\n    // GRID 7  (stilted)\r\n\r\n    newEmotionSettings: {\r\n      newEmotionChance: 0.1,\r\n      awarenessChance: {\r\n        0.25: 1,\r\n        0.5: 1,\r\n        0.75: 1,\r\n        1: 1,\r\n      }\r\n    },\r\n\r\n    defaultCell: {\r\n      ...defaultCell,\r\n      movementType: 'beeline',\r\n\r\n      modifiers: {\r\n        breathers: true\r\n      },\r\n\r\n      decay: {\r\n        '0.25': 100,\r\n        '0.5': 50,\r\n        '0.75': 30,\r\n        '1': 20,\r\n        'recoverFromFull': 0,\r\n      },\r\n\r\n    },\r\n\r\n    movementSettings: {\r\n      default: {\r\n        forward: 0.7,\r\n        left: 0.5,\r\n      },\r\n      left: {\r\n        forward: 0.3,\r\n        left: 0.9,\r\n      },\r\n      right: {\r\n        forward: 0.3,\r\n        left: 0.3,\r\n      },\r\n      beeline: {\r\n        forward: 0.95,\r\n        left: 0.5,\r\n      },\r\n    },\r\n\r\n    movementModifiersSettings: {\r\n      breathers: {\r\n        chance: 0,\r\n        stop: 0.99,\r\n      },\r\n\r\n      homing: {\r\n        enabled: true,\r\n        decrease: false,\r\n        range: 5,\r\n      }\r\n    },\r\n\r\n  },\r\n  {\r\n\r\n    // --------------------\r\n    // GRID 8 (mindful)\r\n\r\n    newEmotionSettings: {\r\n      newEmotionChance: 0.1,\r\n      awarenessChance: {\r\n        0.25: 1,\r\n        0.5: 1,\r\n        0.75: 1,\r\n        1: 1,\r\n      }\r\n    },\r\n\r\n    defaultCell: {\r\n      ...defaultCell,\r\n      movementType: 'randomise',\r\n\r\n      modulateSettingsChange: {\r\n        chance: 0.1,\r\n        isFormTwo: false,\r\n        decay: {\r\n          '0.25': 40,\r\n          '0.5': 30,\r\n          '0.75': 20,\r\n          '1': 10,\r\n          'recoverFromFull': 0,\r\n        },\r\n      },\r\n\r\n      decay: {\r\n        '0.25': 3,\r\n        '0.5': 2,\r\n        '0.75': 2,\r\n        '1': 1,\r\n        'recoverFromFull': 0,\r\n      },\r\n\r\n      growth: {\r\n        '0.25': {\r\n          cycle: 5,\r\n          chance: 0.5\r\n        },\r\n        '0.5': {\r\n          cycle: 5,\r\n          chance: 0.3\r\n        },\r\n        '0.75': {\r\n          cycle: 5,\r\n          chance: 0.2\r\n        },\r\n      },\r\n    },\r\n\r\n    movementSettings: {\r\n      default: {\r\n        forward: 0.75,\r\n        left: 0.5,\r\n      },\r\n      left: {\r\n        forward: 0.05,\r\n        left: 0.9,\r\n      },\r\n      right: {\r\n        forward: 0.2,\r\n        left: 0.2,\r\n      },\r\n      beeline: {\r\n        forward: 0.95,\r\n        left: 0.5,\r\n      },\r\n    },\r\n\r\n    movementModifiersSettings: {\r\n      breathers: {\r\n        chance: 0,\r\n      },\r\n      homing: {\r\n        enabled: false,\r\n      }\r\n    },\r\n\r\n\r\n\r\n  },\r\n  // {\r\n  //   // --------------------\r\n  //   // GRID TEMPLATE\r\n\r\n  //   newEmotionSettings: {\r\n  //     newEmotionChance: 0.5,\r\n  //     awarenessChance: {\r\n  //       0.25: 50,\r\n  //       0.5: 0,\r\n  //       0.75: 0,\r\n  //       1: 1,\r\n  //     }\r\n  //   },\r\n\r\n  //   defaultCell: {\r\n  //     ...defaultCell,\r\n  //     movementType: 'default',\r\n\r\n  //     modifiers: {\r\n  //       breathers: false\r\n  //     },\r\n\r\n  //     modulateSettingsChange: {\r\n  //       chance: 0.1,\r\n  //       isFormTwo: false,\r\n  //       decay: {\r\n  //         '0.25': 5,\r\n  //         '0.5': 5,\r\n  //         '0.75': 5,\r\n  //         '1': 5,\r\n  //         'recoverFromFull': 0,\r\n  //       },\r\n  //     },\r\n\r\n  //     decay: {\r\n  //       '0.25': 1000,\r\n  //       '0.5': 2,\r\n  //       '0.75': 2,\r\n  //       '1': 5,\r\n  //       'recoverFromFull': 0,\r\n  //     },\r\n\r\n  //     growth: {\r\n  //       '0.25': {\r\n  //         cycle: 3,\r\n  //         chance: 0.1\r\n  //       },\r\n  //       '0.5': {\r\n  //         cycle: 2,\r\n  //         chance: 0.1\r\n  //       },\r\n  //       '0.75': {\r\n  //         cycle: 2,\r\n  //         chance: 0.1\r\n  //       },\r\n  //     },\r\n  //   },\r\n\r\n  //   movementSettings: {\r\n  //     default: {\r\n  //       forward: 0.7,\r\n  //       left: 0.5,\r\n  //       // chance: 1,\r\n  //     },\r\n  //     left: {\r\n  //       forward: 0.3,\r\n  //       left: 0.9,\r\n  //       // chance: 1,\r\n  //     },\r\n  //     right: {\r\n  //       forward: 0.3,\r\n  //       left: 0.3,\r\n  //       // chance: 1,\r\n  //     },\r\n  //     beeline: {\r\n  //       forward: 0.95,\r\n  //       left: 0.5,\r\n  //       // chance: 1,\r\n  //     },\r\n  //   },\r\n\r\n  //   movementModifiersSettings: {\r\n  //     breathers: {\r\n  //       chance: 0,\r\n  //       stop: 0.5,\r\n  //     },\r\n\r\n  //     homing: {\r\n  //       enabled: true,\r\n  //       decrease: false,\r\n  //       range: 5,\r\n  //     }\r\n  //   },\r\n\r\n  // },\r\n]\r\n\r\nexport const text = [\r\n  {\r\n    title: `mind state`,\r\n    part: [\r\n      `I think you're underestimating <br/> \r\n      how deeply in love you can fall in <br/> \r\n      with the world`,\r\n    ]\r\n  },\r\n  {\r\n    title: `overwhelmed`,\r\n    part: [\r\n      `to be breathless <br/> \r\n      at the wind-tickled leaves`,\r\n      `to be gripped by tears<br/>\r\n      watching <br/>\r\n      the shimmering web`,\r\n      `to be in awe at the boundless,`,\r\n      `at the universe that exists within <br/>\r\n      this`,\r\n      `crack`,\r\n      `on the pavement`,\r\n    ]\r\n  },\r\n  {\r\n    title: `rumminating`,\r\n    part: [\r\n      `that all things <br/>\r\n      contain an infinite <br/>\r\n      no-thingness`,\r\n      `that to deeply know`,\r\n      `a sock`,\r\n      `is to expand the kind of waves <br/>\r\n      that we can even resonant with`,\r\n    ]\r\n  },\r\n  {\r\n    title: `clenched`,\r\n    part: [\r\n      `to be giddy with excitement <br/>\r\n      in the mornings`,\r\n      `at the prospect of being able to see <br/>\r\n      each and every one of the <br/>\r\n      ten million <br/> \r\n      colours`,\r\n      `at the whirls of the laptop fan`,\r\n      `at the warmness in your <br/>\r\n      belly button`,\r\n    ]\r\n  },\r\n  {\r\n    title: `volatile`,\r\n    part: [\r\n      `that we have <br/>\r\n      10 Richter scales of <br/>\r\n      potential happiness`,\r\n      `and we're told and conditioned<br/>\r\n      to believe that only magnitude<br/>\r\n      2, maybe 3, <br/>\r\n      are not just <br/> \r\n      the only sane levels of happiness<br/>\r\n      but also all that's possible`,\r\n      `that...`,\r\n      `is electrifying!`,\r\n    ]\r\n  },\r\n  {\r\n    title: `anxious`,\r\n    part: [\r\n      `so many sunsets yet<br/>\r\n      to be felt,<br/>\r\n      profoundly`,\r\n    ]\r\n  },\r\n  {\r\n    title: `stilted`,\r\n    part: [\r\n      `just imagine a life where <br/>\r\n      with every passing day`,\r\n      `your highschool crush <br/> \r\n      for the world <br/>\r\n      ever expands`,\r\n      `as your newborn love <br/> \r\n      for the world <br/>\r\n      ever deepens`\r\n    ]\r\n  },\r\n  {\r\n    title: `mindful`,\r\n    part: [\r\n      `I wish for nothing more <br/>\r\n      fervently`,\r\n      `than for that to cultivate <br/>\r\n      in the darkest corners of your <br/> \r\n      gut`,\r\n      `so that the sparks of your mind roots <br/>\r\n      cannot help but be in ecstasy`,\r\n      `with this silly thing <br/>\r\n      we call`,\r\n      `existence.`\r\n    ]\r\n  },\r\n]", "import \"./styles.css\"\r\nimport { MIND_STATE_SETTINGS, text } from './cellSettings'\r\n\r\nconst canvas = document.getElementById('canvas')\r\ncanvas.height = window.innerHeight - 100\r\ncanvas.width = window.innerWidth\r\nconst ctx = canvas.getContext('2d')\r\n\r\n// ======\r\n// STATES\r\n// ======\r\n\r\nlet isStart = false\r\n\r\n// keeping track of text and grid indicies.\r\nlet gridIndex = 0;\r\nlet textPartIndex = 0;\r\n\r\n// =============\r\n// GAME SETTINGS\r\n// =============\r\nconst AWARENESS_INCREMENT = 0.25\r\nconst ROWS_NUM = 20\r\nconst COLUMNS_NUM = 20\r\nconst GRID_NUM = text.length\r\n\r\n// how fast each step\r\nlet tickRate = 50\r\n\r\n\r\n// ==========\r\n// BUILD GRID\r\n// ==========\r\n\r\nconst GREY_300 = \"#e7e2d6\"\r\nconst GREY_500 = \"#cdc3bd\"\r\nconst BLACK = \"#252424\"\r\n\r\nconst BLUE_800 = '#1223A3'\r\nconst BLUE_600 = '#0D58CB'\r\nconst BLUE_400 = '#1F8BED'\r\nconst BLUE_200 = '#91DAFB'\r\n\r\n// from edge of screen\r\nconst MARGIN_TOP = 10\r\nconst MARGIN_LEFT = 140 // space for controls\r\nconst MARGIN_RIGHT = 100\r\n\r\nconst MARGIN_GRID_LEFT = 20\r\nconst MARGIN_GRID_TOP = 250\r\n\r\nconst SCROLLBAR_WIDTH = 20\r\n\r\nconst NUM_OF_GRID_IN_ONE_ROW = 3\r\n\r\n// grid width would determine itself\r\n// const GRID_HEIGHT = canvas.height - MARGIN_TOP * 2\r\n// don't really understand why MARGIN_GRID_LEFT * 2, but it works?\r\n// const GRID_WIDTH = (window.innerWidth - MARGIN_LEFT - MARGIN_RIGHT - SCROLLBAR_WIDTH - MARGIN_GRID_LEFT * 2) / NUM_OF_GRID_IN_ONE_ROW\r\n\r\nconst GRID_WIDTH = 100\r\n// const GRID_WIDTH = 400\r\nconst GRID_HEIGHT = GRID_WIDTH\r\nconst CELL_SIZE = GRID_WIDTH / ROWS_NUM // assuming landscape screen \r\n\r\n// number of rows of entire grids\r\nconst NUM_OF_GRID_ROWS = Math.ceil(GRID_NUM / NUM_OF_GRID_IN_ONE_ROW)\r\n// canvas.height = MARGIN_TOP + GRID_HEIGHT * NUM_OF_GRID_ROWS + MARGIN_GRID_TOP * NUM_OF_GRID_ROWS\r\n\r\n\r\n// text settings\r\nconst PARAGRAPH_WIDTH = 400\r\n\r\nconst TEXT_MARGIN_TOP = 20\r\nconst STATE_TEXT_Y = window.innerHeight * 0.25 + GRID_HEIGHT + TEXT_MARGIN_TOP\r\nconst STATE_TEXT_X = (window.innerWidth / 2) - GRID_WIDTH - (PARAGRAPH_WIDTH / 2) - MARGIN_RIGHT\r\n\r\n\r\n\r\n// ----------------\r\n// grid cell styles\r\n// ----------------\r\n\r\n// const STROKE_COLOUR = '#2b2b2b'\r\nconst STROKE_COLOUR = BLACK\r\n// const STROKE_COLOUR = BLACK\r\nconst FILL_COLOUR = GREY_500\r\n\r\nctx.strokeStyle = STROKE_COLOUR\r\nctx.lineWidth = 1\r\n\r\n\r\n// contains all grid cells\r\n// https://code.likeagirl.io/create-an-array-of-empty-arrays-7ec77edea546\r\nconst grid = Array.from(Array(GRID_NUM), () => [])\r\n\r\n\r\ninitGrid()\r\n\r\nfunction initGrid () {\r\n\r\n  // let gridRowNum = 0\r\n  // a is grid index\r\n  for (let a = 0; a < GRID_NUM; a++) {\r\n\r\n    let gridRowNum = Math.floor(a / NUM_OF_GRID_IN_ONE_ROW)\r\n\r\n    for (let i = 0; i < ROWS_NUM; i++) {\r\n\r\n      // an array for each row\r\n      grid[ a ].push([])\r\n\r\n      for (let j = 0; j < COLUMNS_NUM; j++) {\r\n\r\n        // x is horizontal, y is vertical\r\n        // const y = MARGIN_TOP + gridRowNum * GRID_HEIGHT + gridRowNum * MARGIN_GRID_TOP + i * CELL_SIZE\r\n        // const x = MARGIN_LEFT + (a % NUM_OF_GRID_IN_ONE_ROW) * GRID_WIDTH + MARGIN_GRID_LEFT * (a % NUM_OF_GRID_IN_ONE_ROW) + j * CELL_SIZE\r\n        const y = (window.innerHeight * 0.25) + i * CELL_SIZE\r\n        const x = ((window.innerWidth / 2) - GRID_WIDTH - (PARAGRAPH_WIDTH / 2) - MARGIN_RIGHT) + j * CELL_SIZE\r\n\r\n        // strokes each individual cell\r\n        // ctx.fillRect(x, y, CELL_SIZE, CELL_SIZE)\r\n        // ctx.strokeRect(x, y, CELL_SIZE, CELL_SIZE)\r\n\r\n        grid[ a ][ i ].push({\r\n          ...MIND_STATE_SETTINGS[ a ].defaultCell,\r\n          x: x,\r\n          y: y,\r\n        })\r\n      }\r\n    }\r\n\r\n    // makes a outline stroke around the entire grid\r\n    ctx.strokeStyle = STROKE_COLOUR\r\n    // ctx.strokeRect(((window.innerWidth / 2) - GRID_WIDTH - (PARAGRAPH_WIDTH / 2) - MARGIN_RIGHT), (window.innerHeight * 0.25), GRID_WIDTH, GRID_HEIGHT)\r\n\r\n  }\r\n\r\n  // when gridIndex = 0 and textPartIndex = 0\r\n  // initialise as left arrow hidden\r\n  document.getElementById('left').classList.add('hide')\r\n\r\n  // initialise first text bit\r\n  ctx.fillStyle = '#454545'\r\n  ctx.font = '21px Cormorant Upright'\r\n  ctx.fillText(text[ 0 ].title, STATE_TEXT_X, STATE_TEXT_Y, 400)\r\n\r\n  const textEl = document.getElementById('text')\r\n  textEl.innerHTML = text[ 0 ].part[ 0 ]\r\n\r\n  toggleGame()\r\n}\r\n\r\n\r\nfunction stepGrid () {\r\n  stepPosition()\r\n  stepAttribute()\r\n  addRandomEmotion()\r\n\r\n  // cleans up grid border stroke styling\r\n  ctx.strokeRect(((window.innerWidth / 2) - GRID_WIDTH - (PARAGRAPH_WIDTH / 2) - MARGIN_RIGHT), (window.innerHeight * 0.25), GRID_WIDTH, GRID_HEIGHT)\r\n}\r\n\r\nfunction stepPosition () {\r\n  for (let i = 0; i < ROWS_NUM; i++) {\r\n    for (let j = 0; j < COLUMNS_NUM; j++) {\r\n      moveCells(i, j)\r\n    }\r\n  }\r\n  updateValues()\r\n}\r\n\r\nfunction stepAttribute () {\r\n  // deep clone trick from here: https://dev.to/samanthaming/how-to-deep-clone-an-array-in-javascript-3cig\r\n  const gridCopy = JSON.parse(JSON.stringify(grid[ gridIndex ]))\r\n  // let cellsAlive = 0\r\n\r\n  for (let i = 0; i < ROWS_NUM; i++) {\r\n    for (let j = 0; j < COLUMNS_NUM; j++) {\r\n\r\n      // game of life check\r\n      emotionCheck(i, j, gridCopy)\r\n      drawCell(i, j, grid[ gridIndex ][ i ][ j ].x, grid[ gridIndex ][ i ][ j ].y)\r\n\r\n      // if (grid[ gridIndex ][ i ][ j ].awareness !== 0) cellsAlive++\r\n\r\n    }\r\n  }\r\n\r\n  // modulates how many cells are 'spawned' based on amount of cells in grid\r\n  // if (cellsAlive / (ROWS_NUM * COLUMNS_NUM) >= 0.75 &&\r\n  //   MIND_STATE_SETTINGS[ gridIndex ].newEmotionSettings.newEmotionChance == 0.5) MIND_STATE_SETTINGS[ gridIndex ].newEmotionSettings.newEmotionChance = 0.25\r\n\r\n  // if (cellsAlive / (ROWS_NUM * COLUMNS_NUM) < 0.75 &&\r\n  //   MIND_STATE_SETTINGS[ gridIndex ].newEmotionSettings.newEmotionChance == 0.25) MIND_STATE_SETTINGS[ gridIndex ].newEmotionSettings.newEmotionChance = 0.5\r\n\r\n  // console.log(cellsAlive)\r\n\r\n}\r\n\r\n\r\nfunction drawCell (i, j, x, y) {\r\n  // draws the cells\r\n  const curCell = grid[ gridIndex ][ i ][ j ]\r\n  ctx.clearRect(x, y, CELL_SIZE, CELL_SIZE)\r\n\r\n  if (curCell.awareness > 0) {\r\n\r\n    determineFill(curCell.awareness)\r\n\r\n    ctx.fillRect(x, y, CELL_SIZE, CELL_SIZE)\r\n\r\n  }\r\n}\r\n\r\n\r\n// =============\r\n// AWARENESS SIM\r\n// =============\r\n\r\nfunction moveCells (curRowIndex, curColIndex) {\r\n\r\n  // console.log('grid', gridIndex, grid)\r\n  const curCell = grid[ gridIndex ][ curRowIndex ][ curColIndex ]\r\n\r\n  if (curCell.hasMoved || curCell.awareness == 0) return\r\n\r\n  // ------------------------------------------------------\r\n  // check surrounding available cells\r\n\r\n  const availableDirections = []\r\n\r\n  for (let i = -1; i < 2; i++) {\r\n    for (let j = -1; j < 2; j++) {\r\n\r\n      examinedRow = curRowIndex + i\r\n      examinedCol = curColIndex + j\r\n\r\n      // if edge skip\r\n      if (examinedRow < 0 || examinedRow > ROWS_NUM - 1\r\n        || examinedCol < 0 || examinedCol > COLUMNS_NUM - 1) {\r\n        continue\r\n      }\r\n\r\n      // if cur cell skip\r\n      if (examinedRow == curRowIndex && examinedCol == curColIndex) continue\r\n\r\n      // if cell is occupied skip\r\n      if (grid[ gridIndex ][ examinedRow ][ examinedCol ].awareness !== 0) continue\r\n\r\n      // j is x, i is y\r\n      availableDirections.push(translateDeltaToDirection(j, i))\r\n\r\n    }\r\n  }\r\n\r\n  // if no available slot, do nothing\r\n  if (availableDirections.length == 0) return\r\n\r\n  // console.log('available directions', availableDirections)\r\n\r\n  // ------------------------------------------------------\r\n  // determines next direction\r\n\r\n\r\n  let nextDirection;\r\n\r\n  if (curCell.modifiers.breathers) {\r\n\r\n    if (Math.random() < MIND_STATE_SETTINGS[ gridIndex ].movementModifiersSettings.breathers.stop) {\r\n      curCell.hasMoved = true\r\n      return\r\n    }\r\n\r\n  }\r\n\r\n  if (curCell.movementType == 'homing') {\r\n\r\n    nextDirection = homingMovement()\r\n\r\n  } else {\r\n    // for all other movement types\r\n\r\n    if (curCell.awareness !== 1) {\r\n      // if (curCell.awareness === 0.25) {\r\n\r\n      nextDirection = determineForwardDirection()\r\n\r\n    } else if (curCell.awareness == 1) {\r\n\r\n      // nextDirection = determineForwardDirection()\r\n      if (MIND_STATE_SETTINGS[ gridIndex ].movementModifiersSettings.homing.enabled) {\r\n        nextDirection = homingMovement()\r\n      } else {\r\n        nextDirection = determineForwardDirection()\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // if (curCell.movementType == 'default' || curCell.movementType == 'left' || curCell.movementType == 'right') {\r\n  // } else if (curCell.movementType == 'homing') {\r\n  //   nextDirection = homingMovement()\r\n  // }\r\n\r\n\r\n  // -------------------------\r\n  // FUNCTIONS FOR MOVING\r\n\r\n\r\n  function homingMovement () {\r\n\r\n    let min = -2\r\n    let max = 3\r\n\r\n    // range is the widest search area\r\n    const RANGE = 5\r\n\r\n    // range 2:\r\n    // 2 2 2 2 2\r\n    // 2 1 1 1 2\r\n    // 2 1 0 1 2\r\n    // 2 1 1 1 2\r\n    // 2 2 2 2 2\r\n\r\n    // object keeping track of seen cells\r\n    let checkedCells = {}\r\n\r\n    // let neighbourCells = {\r\n    //   '-1': {\r\n    //     '-1': true,\r\n    //     '0': true,\r\n    //     '1': true,\r\n    //   },\r\n    //   '0': {\r\n    //     '-1': true,\r\n    //     '0': true,\r\n    //     '1': true,\r\n    //   },\r\n    //   '1': {\r\n    //     '-1': true,\r\n    //     '0': true,\r\n    //     '1': true,\r\n    //   }\r\n    // }\r\n\r\n    // progressively searches the outer ring for other cells\r\n    for (let i = min; i < max; i++) {\r\n\r\n      if (!checkedCells[ i ]) checkedCells[ i ] = {}\r\n\r\n      for (let j = min; j < max; j++) {\r\n\r\n        examinedRow = curRowIndex + i\r\n        examinedCol = curColIndex + j\r\n\r\n\r\n        // if cell already checked\r\n        if (checkedCells[ i ][ j ]) {\r\n          continue\r\n        }\r\n\r\n        checkedCells[ i ][ j ] = true\r\n\r\n        // if it's the last checked cell\r\n        if (i == max - 1 && j == max - 1) {\r\n\r\n\r\n          if (!isCellAvailable(examinedRow, examinedCol, curRowIndex, curColIndex)) {\r\n\r\n            // first check looks at if the grid is going over the range search limit\r\n            // second and third checks are for not going over grid limit\r\n            if (max !== MIND_STATE_SETTINGS[ gridIndex ].movementModifiersSettings.homing.range + 1 && examinedRow !== ROWS_NUM - 1 && examinedCol !== COLUMNS_NUM - 1) {\r\n\r\n              min--\r\n              max++\r\n\r\n              // resets loop\r\n              i = min - 1\r\n              j = min - 1\r\n\r\n              break\r\n\r\n            } else {\r\n              // if hit range and have not found another cell yet\r\n              return determineForwardDirection()\r\n\r\n            }\r\n\r\n          }\r\n\r\n        } else {\r\n\r\n          if (!isCellAvailable(examinedRow, examinedCol, curRowIndex, curColIndex))\r\n            continue\r\n\r\n        }\r\n\r\n        // if there's a cell that's right beside it, don't move\r\n        // if (neighbourCells[ i ][ j ]) break\r\n\r\n        nextDirection = translateDeltaToDirection(j, i)\r\n        if (!availableDirections.includes(nextDirection))\r\n          return randomDirection()\r\n        else\r\n          return nextDirection\r\n\r\n\r\n      }\r\n\r\n    }\r\n\r\n    function isCellAvailable (examinedRow, examinedCol, curRowIndex, curColIndex) {\r\n      // if edge, skip\r\n      if (examinedRow < 0 || examinedRow > ROWS_NUM - 1\r\n        || examinedCol < 0 || examinedCol > COLUMNS_NUM - 1) {\r\n        return false\r\n      }\r\n\r\n      // if cur cell, skip\r\n      if (examinedRow == curRowIndex && examinedCol == curColIndex) return false\r\n\r\n      // if grid is empty, skip\r\n      if (grid[ gridIndex ][ examinedRow ][ examinedCol ].awareness == 0) return false\r\n\r\n      // if grid is another 100% awareness, skip\r\n      if (grid[ gridIndex ][ examinedRow ][ examinedCol ].awareness == 1) return false\r\n\r\n      return true\r\n    }\r\n\r\n\r\n    // if there's no cell in vicinity\r\n    determineForwardDirection()\r\n\r\n  }\r\n\r\n\r\n\r\n  function determineForwardDirection () {\r\n\r\n    // if there is already a previous direction\r\n    // cell tries to move in forward, left or right directions\r\n    if (curCell.curDirection) {\r\n\r\n      let forward = curCell.curDirection\r\n      let left = curCell.curDirection - 1\r\n      let right = curCell.curDirection + 1\r\n\r\n      if (left < 1) {\r\n        left = 8\r\n      } else if (left > 8) {\r\n        left = 1\r\n      }\r\n\r\n      if (right < 1) {\r\n        right = 8\r\n      } else if (right > 8) {\r\n        right = 1\r\n      }\r\n\r\n      let forwardDirection = checkForward(forward)\r\n      let sideDirection = checkSide(left, right)\r\n\r\n      if (Math.random() < MIND_STATE_SETTINGS[ gridIndex ].movementSettings[ curCell.movementType ].forward) {\r\n        // keep on going in same direction\r\n\r\n        // checks returns true if next direction successfully set\r\n        // if forward direction is not available, check sides\r\n        if (!forwardDirection) {\r\n          // if sides are not available, assign a random direction\r\n          if (!sideDirection) {\r\n            return randomDirection()\r\n\r\n          } else {\r\n            return sideDirection\r\n          }\r\n\r\n        } else {\r\n          return forwardDirection\r\n        }\r\n\r\n      } else {\r\n        // go towards a side direction\r\n        if (!sideDirection) {\r\n          if (!forwardDirection) {\r\n            return randomDirection()\r\n\r\n          } else {\r\n            return forwardDirection\r\n          }\r\n\r\n        } else {\r\n          return sideDirection\r\n        }\r\n      }\r\n\r\n\r\n    } else {\r\n      // if it's a new cell, move it in a random direction\r\n      return randomDirection()\r\n    }\r\n  }\r\n\r\n\r\n  function checkForward (forward) {\r\n    if (availableDirections.includes(forward)) {\r\n      return forward\r\n    }\r\n    else\r\n      return false\r\n  }\r\n\r\n  function checkSide (left, right) {\r\n\r\n    if (Math.random() < MIND_STATE_SETTINGS[ gridIndex ].movementSettings[ curCell.movementType ].left) {\r\n      // go left if possible\r\n      if (availableDirections.includes(left)) {\r\n        return left\r\n      } else if (availableDirections.includes(right)) {\r\n        return right\r\n      } else {\r\n        return null\r\n      }\r\n    } else {\r\n      // go right if possible\r\n      if (availableDirections.includes(right)) {\r\n        return right\r\n      } else if (availableDirections.includes(left)) {\r\n        return left\r\n      } else {\r\n        return null\r\n      }\r\n    }\r\n  }\r\n\r\n  function randomDirection () {\r\n    // if curCell does not have a direction yet\r\n\r\n    // randomise function in range from: https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\r\n    const MAX = availableDirections.length\r\n    const MIN = 0\r\n    // const ranNum = Math.floor(Math.random() * (MAX - MIN + 1)) + MIN;\r\n    const ranNum = Math.floor(Math.random() * MAX)\r\n    return availableDirections[ ranNum ]\r\n  }\r\n\r\n  // console.log(\"next direction\", nextDirection)\r\n\r\n\r\n\r\n\r\n  // ------------------------------------------------------\r\n  // moves cell\r\n\r\n  const [ deltaX, deltaY ] = translateDirectionToDelta(nextDirection)\r\n\r\n\r\n  const nextCellValues = grid[ gridIndex ][ curRowIndex + deltaY ][ curColIndex + deltaX ]\r\n\r\n  // still have to change the grid itself, not the copy of the values above\r\n  grid[ gridIndex ][ curRowIndex + deltaY ][ curColIndex + deltaX ] = {\r\n    ...curCell,\r\n    curDirection: nextDirection,\r\n    hasMoved: true,\r\n    modifiers: {\r\n      ...curCell.modifiers\r\n    },\r\n    x: nextCellValues.x,\r\n    y: nextCellValues.y,\r\n  }\r\n\r\n  // console.log(deltaX, deltaY, grid[ curRowIndex + deltaY ][ curColIndex + deltaX ])\r\n\r\n  curCell.awareness = 0\r\n  curCell.curDirection = 0\r\n  curCell.hasMoved = false\r\n  curCell.cyclesAlive = 0\r\n  curCell.modifiers = {\r\n    breathers: MIND_STATE_SETTINGS[ gridIndex ].defaultCell.modifiers.breathers\r\n  }\r\n\r\n  // console.log('mindstate', gridIndex, MIND_STATE_SETTINGS[ gridIndex ].defaultCell.modifiers)\r\n\r\n  if (curCell.modulateSettingsChange) {\r\n    if (grid[ gridIndex ][ curRowIndex + deltaY ][ curColIndex + deltaX ].modulateSettingsChange.isFormTwo) {\r\n      // grid[ gridIndex ][ curRowIndex + deltaY ][ curColIndex + deltaX ].modulateSettingsChange.isFormTwo = true\r\n      // don't know why above form doesn't work\r\n      grid[ gridIndex ][ curRowIndex + deltaY ][ curColIndex + deltaX ].modulateSettingsChange = {\r\n        ...grid[ gridIndex ][ curRowIndex + deltaY ][ curColIndex + deltaX ].modulateSettingsChange,\r\n        isFormTwo: true\r\n      }\r\n      curCell.modulateSettingsChange.isFormTwo = false\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // directions:\r\n  // 812\r\n  // 7a3\r\n  // 654\r\n\r\n  // translates deltas into a direction\r\n  function translateDeltaToDirection (x, y) {\r\n\r\n    let direction\r\n\r\n    if (x <= -1 && y <= -1)\r\n      direction = 8\r\n    else if (x == 0 && y <= -1)\r\n      direction = 1\r\n    else if (x >= 1 && y <= -1)\r\n      direction = 2\r\n    else if (x <= -1 && y == 0)\r\n      direction = 7\r\n    else if (x >= 1 && y == 0)\r\n      direction = 3\r\n    else if (x <= -1 && y >= 1)\r\n      direction = 6\r\n    else if (x == 0 && y >= 1)\r\n      direction = 5\r\n    else if (x >= 1 && y >= 1)\r\n      direction = 4\r\n\r\n    return direction\r\n\r\n  }\r\n\r\n  // translates direction into how many x and y delta\r\n  function translateDirectionToDelta (direction) {\r\n\r\n    let x, y\r\n\r\n    switch (direction) {\r\n      case 1:\r\n        x = 0\r\n        y = -1\r\n        break\r\n\r\n      case 2:\r\n        x = 1\r\n        y = -1\r\n        break\r\n\r\n      case 3:\r\n        x = 1\r\n        y = 0\r\n        break\r\n\r\n      case 4:\r\n        x = 1\r\n        y = 1\r\n        break\r\n\r\n      case 5:\r\n        x = 0\r\n        y = 1\r\n        break\r\n\r\n      case 6:\r\n        x = -1\r\n        y = 1\r\n        break\r\n\r\n      case 7:\r\n        x = -1\r\n        y = 0\r\n        break\r\n\r\n      case 8:\r\n        x = -1\r\n        y = -1\r\n        break\r\n\r\n      default:\r\n        console.log('something went wrong in direction switch')\r\n    }\r\n    return [ x, y ]\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// checks surrounding cells' previous values \r\n// to determine the next value\r\n\r\n// i is row, j is col \r\nfunction emotionCheck (curRowIndex, curColIndex, gridCopy) {\r\n\r\n  const curCell = grid[ gridIndex ][ curRowIndex ][ curColIndex ]\r\n  if (curCell.awareness == 0) return\r\n  // console.log(curCell.hadFullAwareness, curRowIndex, curColIndex)\r\n\r\n  modulateAwareness() // biases cell dying / growing \r\n\r\n  if (curCell.awareness === 1 || curCell.awareness === 0 || curCell.hadFullAwareness) {\r\n\r\n  } else {\r\n    checkNeighbours()\r\n  }\r\n\r\n  // for decaying and growing\r\n  function modulateAwareness () {\r\n\r\n    curCell.cyclesAlive--\r\n\r\n    // if there are growth settings\r\n    if (curCell.awareness !== 1 && curCell.growth) {\r\n      // should probably implement hadFullAwareness check\r\n      // if (curCell.awareness !== 1 && curCell.growth && !curCell.hadFullAwareness) {\r\n\r\n      // if the cycles matches growth settings\r\n      if (curCell.cyclesAlive === curCell.growth[ curCell.awareness ].cycle) {\r\n        // if chance is hit\r\n        if (Math.random() < curCell.growth[ curCell.awareness ].chance) {\r\n\r\n          // grow cell\r\n          curCell.awareness += AWARENESS_INCREMENT\r\n\r\n          setCyclesSettings(curCell)\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n\r\n    if (curCell.cyclesAlive <= 0) {\r\n\r\n      curCell.awareness -= AWARENESS_INCREMENT\r\n\r\n      if (curCell.awareness !== 0) {\r\n\r\n        // if cell awareness is 0.25 and it's already hadFullAwareness, allow it to live for only one cycle\r\n\r\n        setCyclesSettings(curCell)\r\n\r\n      } else {\r\n        // resetting cell\r\n        resetCell(curCell)\r\n\r\n        // curCell.curDirection = 0\r\n        // curCell.hadFullAwareness = false\r\n\r\n        // // not sure if the below properly resets. Should check\r\n        // curCell.modifiers = {\r\n        //   ...MIND_STATE_SETTINGS[ gridIndex ].defaultCell.modifiers\r\n        // }\r\n\r\n        // if (curCell.modulateSettingsChange)\r\n        //   curCell.modulateSettingsChange.isFormTwo = false\r\n\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function checkNeighbours () {\r\n    // neighbours check\r\n    let moreAwareNeighbours = 0\r\n\r\n    // checks 3x3 grid for neighbour status\r\n    for (let i = -1; i < 2; i++) {\r\n      for (let j = -1; j < 2; j++) {\r\n        // uses i and j values as addition values\r\n        examinedRow = curRowIndex + i\r\n        examinedCol = curColIndex + j\r\n\r\n        // if is center cell, skip\r\n        if (examinedRow == curRowIndex && examinedCol == curColIndex) continue\r\n\r\n        // if edge skip\r\n        if (examinedRow < 0 || examinedRow > ROWS_NUM - 1\r\n          || examinedCol < 0 || examinedCol > COLUMNS_NUM - 1) {\r\n          continue\r\n        }\r\n\r\n        let examinedCell = gridCopy[ examinedRow ][ examinedCol ]\r\n        if (examinedCell.awareness > grid[ gridIndex ][ curRowIndex ][ curColIndex ].awareness) moreAwareNeighbours++\r\n\r\n        // the full awareness cell is reset down to 0.75 \r\n        if (examinedCell.awareness == 1) {\r\n          if (MIND_STATE_SETTINGS[ gridIndex ].movementModifiersSettings.homing.decrease) {\r\n            let curLiveCell = grid[ gridIndex ][ examinedRow ][ examinedCol ]\r\n            curLiveCell.awareness = 0.5\r\n            curLiveCell.cyclesAlive = curLiveCell.decay[ 0.5 ]\r\n\r\n            if (curLiveCell.movementModifiersSettings)\r\n              curLiveCell.cyclesAlive = curLiveCell.modulateSettingsChange.decay[ 0.5 ]\r\n\r\n            // grid[ gridIndex ][ examinedRow ][ examinedCol ].awareness = 0.75\r\n            // grid[ gridIndex ][ examinedRow ][ examinedCol ].cyclesAlive = grid[ gridIndex ][ examinedRow ][ examinedCol ].decay[ 0.75 ]\r\n          }\r\n        }\r\n\r\n        // if (gridCopy[ examinedRow ][ examinedCol ].awareness !== 0) console.log('examining: ', examinedRow, examinedCol, gridCopy[ examinedRow ][ examinedCol ].awareness)\r\n      }\r\n    }\r\n    // console.log('3x3 examination complete. Num of live neighbours: ', moreAwareNeighbours)\r\n    // console.log('for: ', curCell.awareness)\r\n\r\n    if (moreAwareNeighbours > 0) {\r\n      // each neighbour that has greater awareness \r\n      // than cur cell increases it by the awareness increment (e.g 0.25)\r\n      const increasedAwarenessAmount = moreAwareNeighbours * AWARENESS_INCREMENT\r\n      curCell.awareness += increasedAwarenessAmount\r\n\r\n      if (curCell.awareness >= 1) curCell.awareness = 1\r\n\r\n      setCyclesSettings(curCell)\r\n\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n// if no version control, will have to have\r\n// an extra loop through all cells to move\r\n// new value to old value\r\nfunction updateValues () {\r\n  grid[ gridIndex ].forEach((row) => {\r\n    row.forEach((cell) => {\r\n      cell.hasMoved = false\r\n    })\r\n  })\r\n}\r\n\r\n\r\n\r\nlet attempts = 0\r\n\r\nfunction addRandomEmotion () {\r\n\r\n  attempts++\r\n\r\n  if (Math.random() < MIND_STATE_SETTINGS[ gridIndex ].newEmotionSettings.newEmotionChance) {\r\n    const randomRow = Math.floor(Math.random() * ROWS_NUM)\r\n    const randomCol = Math.floor(Math.random() * COLUMNS_NUM)\r\n\r\n    if (grid[ gridIndex ][ randomRow ][ randomCol ].awareness !== 0) {\r\n      // just so it doesn't recursively loop forever\r\n      if (attempts > 10) {\r\n        attempts = 0\r\n        return\r\n      }\r\n      addRandomEmotion()\r\n\r\n    } else {\r\n      let curCell = grid[ gridIndex ][ randomRow ][ randomCol ]\r\n\r\n      resetCell(curCell)\r\n\r\n      // different probabilities\r\n      // https://stackoverflow.com/questions/49164635/javascript-get-random-result-with-probability-for-specific-array\r\n\r\n      // -------------------------------------\r\n      // sets different awareness amounts \r\n      // based on probability\r\n\r\n      let awarenessChance = MIND_STATE_SETTINGS[ gridIndex ].newEmotionSettings.awarenessChance\r\n\r\n      let awarenessProbability = []\r\n\r\n      for (const awarenessAmount in awarenessChance) {\r\n        awarenessProbability.push(Array(awarenessChance[ awarenessAmount ]).fill(awarenessAmount))\r\n      }\r\n\r\n      awarenessProbability = awarenessProbability.reduce((prevValue, curValue) => prevValue.concat(curValue))\r\n\r\n\r\n      // multiply 1 at end to convert string -> int\r\n      let selectedAwarenessAmount = (awarenessProbability[ Math.floor((Math.random() * awarenessProbability.length)) ] * 1)\r\n\r\n\r\n\r\n      let selectedMovementType = MIND_STATE_SETTINGS[ gridIndex ].defaultCell.movementType\r\n\r\n      // -----------------------\r\n      // if random movement\r\n\r\n      if (selectedMovementType === 'randomise') {\r\n\r\n        let movementSettings = MIND_STATE_SETTINGS[ gridIndex ].movementSettings\r\n\r\n        // sets different movement types based on probability for each individual cell\r\n        let movementProbability = []\r\n\r\n        for (const movementType in movementSettings) {\r\n          movementProbability.push(Array(movementSettings[ movementType ].chance).fill(movementType))\r\n        }\r\n\r\n        movementProbability = movementProbability.reduce((prevValue, curValue) => prevValue.concat(curValue))\r\n\r\n        selectedMovementType = (movementProbability[ Math.floor((Math.random() * movementProbability.length)) ])\r\n      }\r\n\r\n      curCell.movementType = selectedMovementType\r\n\r\n      // --------------------------------------------\r\n      // enabling breather based on chance value\r\n      if (Math.random() < MIND_STATE_SETTINGS[ gridIndex ].movementModifiersSettings.breathers.chance) {\r\n\r\n        // console.log(gridIndex, curCell)\r\n        grid[ gridIndex ][ randomRow ][ randomCol ].modifiers.breathers = true\r\n        // for some reason below is influencing all cells in both grid 0 and grid 1\r\n\r\n      }\r\n\r\n      // -----------------------------\r\n      // modulate settings chance\r\n      if (curCell.modulateSettingsChange)\r\n        if (Math.random() < curCell.modulateSettingsChange.chance)\r\n          curCell.modulateSettingsChange.isFormTwo = true\r\n\r\n\r\n\r\n\r\n      determineFill(selectedAwarenessAmount)\r\n\r\n      ctx.fillRect(curCell.x, curCell.y, CELL_SIZE, CELL_SIZE)\r\n      curCell.awareness = selectedAwarenessAmount\r\n      setCyclesSettings(curCell)\r\n\r\n      attempts = 0\r\n\r\n      return\r\n    }\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n// ==========\r\n// MISC FUNCS\r\n// ==========\r\n\r\nfunction determineFill (value) {\r\n\r\n  switch (value) {\r\n    case 0:\r\n      break\r\n    case 0.25:\r\n      ctx.fillStyle = BLUE_200\r\n      break\r\n    case 0.5:\r\n      ctx.fillStyle = BLUE_400\r\n      break\r\n    case 0.75:\r\n      ctx.fillStyle = BLUE_600\r\n      break\r\n    case 1:\r\n      ctx.fillStyle = BLUE_800\r\n      break\r\n    default:\r\n      console.log(\"something went wrong in cell awareness switch\", value)\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction setCyclesSettings (cell) {\r\n\r\n  let decaySettings = { ...cell.decay }\r\n\r\n  if (cell.modulateSettingsChange)\r\n    if (cell.modulateSettingsChange.isFormTwo)\r\n      decaySettings = { ...cell.modulateSettingsChange.decay }\r\n\r\n  switch (cell.awareness) {\r\n    case 0.25:\r\n\r\n      cell.cyclesAlive = decaySettings[ 0.25 ]\r\n\r\n      if (cell.hadFullAwareness) {\r\n\r\n        if (Math.random() < decaySettings.recoverFromFull) {\r\n          cell.hadFullAwareness = false\r\n        } else {\r\n          cell.cyclesAlive = 1\r\n        }\r\n\r\n      }\r\n\r\n      break\r\n\r\n    case 0.5:\r\n      cell.cyclesAlive = decaySettings[ 0.5 ]\r\n      break\r\n    case 0.75:\r\n      cell.cyclesAlive = decaySettings[ 0.75 ]\r\n      break\r\n    case 1:\r\n      cell.cyclesAlive = decaySettings[ 1 ]\r\n      cell.hadFullAwareness = true\r\n      break\r\n    default:\r\n      console.log('something went wrong in set cycles')\r\n  }\r\n}\r\n\r\nfunction resetCell (cell) {\r\n\r\n  ctx.strokeStyle = STROKE_COLOUR\r\n  ctx.clearRect(cell.x, cell.y, CELL_SIZE, CELL_SIZE)\r\n  cell.awareness = 0\r\n  cell.curDirection = 0\r\n  cell.hadFullAwareness = false\r\n\r\n  // not sure if the below properly resets. Should check\r\n  cell.modifiers = {\r\n    ...MIND_STATE_SETTINGS[ gridIndex ].defaultCell.modifiers\r\n  }\r\n\r\n  if (cell.modulateSettingsChange)\r\n    cell.modulateSettingsChange.isFormTwo = false\r\n\r\n}\r\n\r\n// ====================\r\n// CANVAS INTERACTIVITY\r\n// ====================\r\n\r\n\r\nlet gameInterval\r\n\r\n// start game\r\nconst startButton = document.getElementById('start')\r\nstartButton.addEventListener('click', toggleGame)\r\n\r\nfunction toggleGame () {\r\n  if (!isStart) {\r\n    isStart = true\r\n    // startButton.innerText = 'stop'\r\n    // startButton.classList = 'stop'\r\n\r\n    gameInterval = setInterval(() => {\r\n      stepGrid()\r\n    }, tickRate)\r\n\r\n  }\r\n  else {\r\n    isStart = false\r\n    // startButton.innerText = 'start'\r\n    // startButton.classList = 'start'\r\n    clearInterval(gameInterval)\r\n  }\r\n}\r\n\r\n\r\n// // expand collapse the settings menu\r\n// const settings = document.getElementById('settings')\r\n// const controls = document.getElementById('controls')\r\n// controls.addEventListener('click', () => {\r\n//   settings.classList.toggle('collapse')\r\n// })\r\n\r\n\r\n\r\n\r\n// // if isLive, turn it off. If no, turn it on\r\n// // this has to freeze the versions - no spread function\r\n// canvas.addEventListener('click', e => {\r\n\r\n//   // stops it running\r\n//   if (isStart) toggleGame()\r\n\r\n\r\n//   const awarenessSliderValue = document.getElementById('awareness').value\r\n\r\n//   // client not page as assuming no scroll\r\n//   const clickX = e.pageX\r\n//   const clickY = e.pageY\r\n\r\n//   grid[ gridIndex ].forEach((row) => {\r\n//     row.forEach((cell) => {\r\n\r\n//       // checks if click is in cell\r\n//       if (clickX > cell.x && clickX < cell.x + CELL_SIZE && clickY > cell.y && clickY < cell.y + CELL_SIZE) {\r\n\r\n//         // temporary debugging - examines cell clicked on if awareness slider is 0\r\n//         if (awarenessSliderValue / 100 == 0) {\r\n//           console.log('EXAMINING...', cell)\r\n//           return\r\n//         }\r\n\r\n//         ctx.clearRect(cell.x, cell.y, CELL_SIZE, CELL_SIZE)\r\n//         ctx.strokeStyle = STROKE_COLOUR\r\n\r\n//         // awarenessSliderValue\r\n//         cell.awareness = awarenessSliderValue / 100\r\n\r\n//         determineFill(cell.awareness)\r\n\r\n\r\n//         if (cell.awareness > 0) {\r\n//           ctx.fillRect(cell.x, cell.y, CELL_SIZE, CELL_SIZE)\r\n//           setCyclesSettings(cell)\r\n//           cell.movementType = 'default'\r\n\r\n//         }\r\n//       }\r\n//     })\r\n//   })\r\n\r\n\r\n\r\n// })\r\n\r\n// // reset button\r\n// document.getElementById('reset')\r\n//   .addEventListener('click', e => {\r\n\r\n//     if (isStart) toggleGame()\r\n\r\n//     grid[ gridIndex ].forEach((row) => {\r\n//       row.forEach((cell) => {\r\n//         resetCell(cell)\r\n\r\n//       })\r\n//     })\r\n\r\n//     ctx.strokeStyle = STROKE_COLOUR\r\n//     ctx.strokeRect(((window.innerWidth / 2) - GRID_WIDTH - (PARAGRAPH_WIDTH / 2) - MARGIN_RIGHT), (window.innerHeight * 0.25), GRID_WIDTH, GRID_HEIGHT)\r\n\r\n\r\n//   })\r\n\r\n\r\n\r\n// // rate\r\n// document.getElementById('rate')\r\n//   .addEventListener('change', e => {\r\n//     tickRate = e.target.value\r\n//   })\r\n\r\n// document.getElementById('rate')\r\n//   .addEventListener('click', e => {\r\n//     // pauses game on rate input field click\r\n//     if (isStart) toggleGame()\r\n//   })\r\n\r\n\r\n// // step forward by one\r\n// document.getElementById('step')\r\n//   .addEventListener('click', e => {\r\n//     stepGrid()\r\n//   })\r\n\r\n\r\n\r\n\r\n// ------------------\r\n// text settings\r\n\r\n\r\ndocument.getElementById('left')\r\n  .addEventListener('click', e => {\r\n    changeText('left')\r\n  })\r\n\r\ndocument.getElementById('right')\r\n  .addEventListener('click', e => {\r\n    changeText('right')\r\n  })\r\n\r\n\r\nconst textEl = document.getElementById('text')\r\nconst TRANSITION_TIME = 250\r\nlet isTransitioning = false\r\n\r\nfunction changeText (direction) {\r\n  if (isTransitioning) return\r\n\r\n  if (direction == 'left') {\r\n    textPartIndex--\r\n\r\n\r\n\r\n    if (textPartIndex < 0) {\r\n\r\n      // transitions canvas and text\r\n      textEl.classList.add('fadeOut')\r\n      canvas.classList.add('fadeOut')\r\n\r\n      gridIndex--\r\n      textPartIndex = text[ gridIndex ].part.length - 1\r\n\r\n      isTransitioning = true\r\n      setTimeout(() => {\r\n        isTransitioning = false\r\n\r\n        reset()\r\n\r\n        // grid pattern text\r\n        ctx.fillStyle = '#454545'\r\n        ctx.font = '21px Cormorant Upright'\r\n        ctx.fillText(text[ gridIndex ].title, STATE_TEXT_X, STATE_TEXT_Y, 400)\r\n\r\n        textEl.innerHTML = text[ gridIndex ].part[ textPartIndex ]\r\n\r\n        textEl.classList.remove('fadeOut')\r\n        canvas.classList.remove('fadeOut')\r\n\r\n      }, TRANSITION_TIME)\r\n\r\n    } else {\r\n      textEl.innerHTML = text[ gridIndex ].part[ textPartIndex ]\r\n    }\r\n\r\n    if (gridIndex == text.length - 2 || gridIndex == text.length - 1 && textPartIndex !== text[ gridIndex ].part.length - 1) {\r\n      document.getElementById('right').classList.remove('hide')\r\n    }\r\n\r\n    if (gridIndex == 0 && textPartIndex == 0) {\r\n      document.getElementById('left').classList.add('hide')\r\n    }\r\n\r\n\r\n  } else if (direction == 'right') {\r\n    textPartIndex++\r\n\r\n\r\n    // new grid pattern\r\n    if (textPartIndex >= text[ gridIndex ].part.length) {\r\n\r\n\r\n      textEl.classList.add('fadeOut')\r\n      canvas.classList.add('fadeOut')\r\n\r\n      isTransitioning = true\r\n\r\n      setTimeout(() => {\r\n        isTransitioning = false\r\n\r\n        reset()\r\n        gridIndex++\r\n        textPartIndex = 0\r\n\r\n        // grid pattern text\r\n        ctx.fillStyle = '#454545'\r\n        ctx.font = '21px Cormorant Upright'\r\n        ctx.fillText(text[ gridIndex ].title, STATE_TEXT_X, STATE_TEXT_Y, 400)\r\n\r\n        textEl.innerHTML = text[ gridIndex ].part[ textPartIndex ]\r\n\r\n        textEl.classList.remove('fadeOut')\r\n        canvas.classList.remove('fadeOut')\r\n      }, TRANSITION_TIME)\r\n\r\n    } else {\r\n      textEl.innerHTML = text[ gridIndex ].part[ textPartIndex ]\r\n    }\r\n\r\n    if (gridIndex == 1 || gridIndex == 0 && textPartIndex == 1) {\r\n      document.getElementById('left').classList.remove('hide')\r\n    }\r\n\r\n    if (gridIndex == text.length - 1 && textPartIndex >= text[ gridIndex ].part.length - 1) {\r\n      document.getElementById('right').classList.add('hide')\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  // resets all cell grids\r\n  function reset () {\r\n    grid[ gridIndex ].forEach((row) => {\r\n      row.forEach((cell) => {\r\n        resetCell(cell)\r\n      })\r\n    })\r\n\r\n    ctx.clearRect(0, 0, canvas.height, canvas.width)\r\n  }\r\n\r\n\r\n  console.log(gridIndex, textPartIndex)\r\n\r\n}\r\n\r\n\r\n// examine button for debugging\r\n// document.getElementById('examine')\r\n//   .addEventListener('click', e => {\r\n\r\n//     grid.forEach((row) => {\r\n//       row.forEach((cell) => {\r\n//         console.log(cell)\r\n//       })\r\n//     })\r\n\r\n//   })\r\n\r\n"],
  "mappings": "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",
  "names": []
}
